<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REAL ERP on REAL Documentation</title>
    <link>http://vankessel-it.io/real_doc/</link>
    <description>Recent content in REAL ERP on REAL Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2019 15:52:16 +0200</lastBuildDate>
    
	<atom:link href="http://vankessel-it.io/real_doc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code Generation</title>
      <link>http://vankessel-it.io/real_doc/reference/codegeneration/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/codegeneration/</guid>
      <description>REAL:
source tree:
   Layer DSL component Extendable component Immutable component     Client client-viewmodel P  base/P.java    view V V.java base/AbstractV.java    form F F.java base/AbstractF.java    menu M  M.java   Shared labelSet L  L.java      L.properties    valueType T T.java base/AbstractT.java    entity E  base/EMeta.java    viewmodel V  base/VApi.</description>
    </item>
    
    <item>
      <title>Getters</title>
      <link>http://vankessel-it.io/real_doc/appendix/domein_entity/getters/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domein_entity/getters/</guid>
      <description>Entities have two getter methods for every attribute field:
 &amp;lt;ValueType&amp;gt; get&amp;lt;attributeName&amp;gt;(): returns a DomainValue &amp;lt;primitive-value&amp;gt; get&amp;lt;attributeName&amp;gt;Value(): returns the underlying Java value  one getter method for relation fields:
 &amp;lt;DomainEntity&amp;gt; get&amp;lt;relationName&amp;gt;(): returns a DomainEntity  and one generic getFieldValue(&amp;quot;&amp;lt;fieldName&amp;gt;&amp;quot;) method in order to retreive field values by name.
The returned types for getters are as follows:
   ValueType final get&amp;lt;fieldName&amp;gt;() @Override get&amp;lt;fieldName&amp;gt;Value() Nullable     DomainBoolean ValueType Boolean No   DomainDate ValueType LocalDate Yes   DomainDateTime ValueType LocalDateTime Yes   DomainDecimal ValueType BigDecimal No   DomainEnumerate Enum String (code) No   DomainInteger ValueType Integer No   DomainLong ValueType Long No   DomainString ValueType String No   DomainText ValueType String Yes   DomainTime ValueType LocalTime Yes   DomainRelation DomainEntity undefined Yes    For relation-fields the method getFieldValue(final String fieldName) returns a DomainEntity.</description>
    </item>
    
    <item>
      <title>Tooling</title>
      <link>http://vankessel-it.io/real_doc/reference/tooling/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/tooling/</guid>
      <description>Structure and consistency for large code bases Business Concepts reflected in Code Guaranteed valid Domain Model Enforce NULL-safety (“the worst mistake in computer science”)
Tooling consist:
 of a Domain Specific Language (DSL) for defining the domain-model, menus, forms and services an Eclipse IDE (Develop Environment) plugin for supporting the DSL’s and code-generation a set of libraries (required in development and operational)  Eclipse Plugin Enforce NULL-safety  “I call it [NULL] my billion-dollar mistake” (Tony Hoare, inventor of ALGOL W)</description>
    </item>
    
    <item>
      <title>Setters</title>
      <link>http://vankessel-it.io/real_doc/appendix/domein_entity/setters/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domein_entity/setters/</guid>
      <description>Entities have two setter methods for every attribute field:
 set&amp;lt;attributeName&amp;gt;(&amp;lt;ValueType&amp;gt;): sets a DomainValue set&amp;lt;attributeName&amp;gt;Value(&amp;lt;primitive-value&amp;gt;): sets the underlying Java value  one setter method for relation fields:
 set&amp;lt;relationName&amp;gt;(&amp;lt;DomainEntity&amp;gt; ): sets a DomainEntity  and one generic setFieldValue(&amp;quot;&amp;lt;fieldName&amp;gt;&amp;quot;) method in order to set field values by name.
The value-parameter types for setters are as follows:
   ValueType @Override set&amp;lt;fieldName&amp;gt;(...) final set&amp;lt;fieldName&amp;gt;Value(..) Nullable     DomainBoolean ValueType Boolean No   DomainDate ValueType LocalDate Yes   DomainDateTime ValueType LocalDateTime Yes   DomainDecimal ValueType BigDecimal No   DomainEnumerate Enum String (code) No   DomainInteger ValueType Integer No   DomainLong ValueType Long No   DomainString ValueType String No   DomainText ValueType String Yes   DomainTime ValueType LocalTime Yes   DomainRelation DomainEntity undefined Yes    For relation-fields the method setFieldValue(final String fieldName, Object value) expects a DomainEntity value.</description>
    </item>
    
    <item>
      <title>Product Comparison</title>
      <link>http://vankessel-it.io/real_doc/appendix/comparison/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/comparison/</guid>
      <description>How does it stack up ? REAL is a low-code software development environment. REAL aims to minimize the overall code-base of administrative systems, while promoting concise and quality business-code.
    Thinkwise Mendix Studio Pro 8 REAL 7     General      Technologie Platform MS .NET Java 11 Java 11   Product Type framework framework set libraries (13 in total)   Programming language procedural SQL nano/micro-flows, Java/JS call-outs Java for desktop, web (mobile) and server   Target audience Thinkwise developers Citizen developers Professional developers   Since 2002 2005 2007   # Developers 20+ 20+ 2+   Modelling      Database grafical-model grafical-model text-model (Domain Specific Language)   User-interface definition in tabels UI-designer, pages / widgets text-model (DSL), code or UI-designer (Vaadin)   Custom Code      Business code works only within Thinkwise works only within Mendix (micro-flow) independent from REAL, standard Java / Spring   User-interface code programming not supported works only within Mendix (nano-flow) dependent on REAL, standard Java / Spring   Uitbreidbaarheid very limited limited Java/JS call-out complete Java / Spring platform, and external libraries   Code Quality      Automatic checks no no industry-standard: Sonar, Structure101, etc.</description>
    </item>
    
    <item>
      <title>Additional Methods</title>
      <link>http://vankessel-it.io/real_doc/appendix/domein_entity/additional_methods/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domein_entity/additional_methods/</guid>
      <description>Entities have the following extra methods:
   Method Description     MEntity getEntityMeta() return entity Meta data   EntityKey getEntityKey() return surrogate-key wrapper class   EntityVersion getEntityVersion() return optimistic-locking version number   BusinessKey getBusinessKey() return a serializable representation of the entity business key   boolean isReadOnly(final String fieldName) if returned &amp;lsquo;true&amp;rsquo; the field setter will generate an exception   boolean isMandatory(final String fieldName) if returned &amp;lsquo;true&amp;rsquo; the field setter will not accept a Null value.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/configuration/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/configuration/</guid>
      <description>Global application configurations are contained in one or more configuration DSL files.
Labels The configuration file specifies the label-sets available in the application:
package nl.openframe.erp.system import nl.openframe.erp.system.bc.SYS_BCLabels import nl.openframe.erp.system.bf.SYS_BFLabels import nl.openframe.erp.system.bt.SYS_BTLabels import nl.openframe.erp.system.sr.SYS_SRLabels import nl.openframe.erp.system.SystemLabels configuration SystemSharedConfiguration{ label-set SYS_BCLabels label-set SYS_BFLabels label-set SYS_BTLabels label-set SYS_SRLabels label-set SystemLabels }  This translates into a Spring configuration class which imports all the message resources.
@Configuration public class SystemSharedConfiguration{ @Bean public MessageSource messageSource() { final ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource(); messageSource.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/boolean/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/boolean/</guid>
      <description>Boolean value type DSL declaration:
import nl.openframe.erp.system.SystemLabels.confirmedLabel boolean Confirmed confirmedLabel  This will generate two new classes: Confirmed.java and AbstractConfirmed.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class Confirmed extends AbstractConfirmed{ public Confirmed(final Boolean value) { super(value); } } The abstract class extends DomainBoolean and adds static constructors:
final Confirmed c1 = Confirmed.of(true); final Confirmed c2 = Confirmed.of(&amp;#34;True&amp;#34;); final Confirmed c3 = Confirmed.</description>
    </item>
    
    <item>
      <title>Date</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/date/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/date/</guid>
      <description>Date value type DSL declaration:
import nl.openframe.erp.system.bt.SYS_BTLabels.executionDateLabel date ExecutionDate executionDateLabel  This will generate two new classes: ExecutionDate.java and AbstractExecutionDate.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class ExecutionDate extends AbstractExecutionDate{ public ExecutionDate(final LocalDate value) { super(value); } } The abstract class extends DomainDate and adds static constructors:
final ExecutionDate d1 = ExecutionDate.now(); final ExecutionDate d2 = ExecutionDate.of(LocalDate.now()); final ExecutionDate d3 = ExecutionDate.</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/datetime/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/datetime/</guid>
      <description>DateTime value type DSL declaration, including precision:
import nl.openframe.erp.system.sr.SYS_SRLabels.alertDateTimeLabel datetime AlertDateTime alertDateTimeLabel milliseconds  The precision can be milliseconds, seconds or minutes. New instances will be truncated according to their precision.
This will generate two new classes: AlertDateTime.java and AbstractAlertDateTime.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class AlertDateTime extends AbstractAlertDateTime{ public AlertDateTime(final LocalDateTime value) { super(value); } } The abstract class extends DomainDateTime and adds static constructors:</description>
    </item>
    
    <item>
      <title>Decimal</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/decimal/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/decimal/</guid>
      <description>Decimal value type DSL declaration, including respectively, the precision, scale and rounding:
import nl.openframe.erp.system.SystemLabels.amountLabel decimal Amount amountLabel 10 2 half_up  The rounding can be ceiling, down, floor, half_down, half_even, half_up or up.
This will generate two new classes: Amount.java and AbstractAmount.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class Amount extends AbstractAmount{ public Amount(final BigDecimal value) { super(value); } } The abstract class extends DomainDecimal and adds static constructors:</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>http://vankessel-it.io/real_doc/introduction/design/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/introduction/design/</guid>
      <description>Page loading: (1) SQL + Paging + no count required if less than one page found - lots of complex SQL&amp;rsquo;s when paging - table can be any size&amp;hellip; +/- new records appear during browsing
(2) Read Keys, load records by Id + refresh of records without adding / loosing records more stable + one complex SQL, lots of easy loads + order does not change after deleting, inserting, navigating, changing sort-order field or chaning a field that removes it by a filter +/- background incremental loading is possible - maximum number of Id&amp;rsquo;s, then a &amp;lsquo;more&amp;hellip;&amp;rsquo; indicator</description>
    </item>
    
    <item>
      <title>Domain Boolean</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/boolean/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/boolean/</guid>
      <description>Boolean Value Types extend DomainBoolean, which is a wrapper arround a Boolean instance.
The value-type must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;negate&amp;rsquo;.
For example, the declaration of a new Confirmed value type:
class Confirmed extends DomainBoolean&amp;lt;Confirmed&amp;gt;{ public Confirmed(final Boolean value) { super(value); } @Override protected Confirmed createInstance(final Boolean value) { return new Confirmed(value); } } usage:
final Confirmed confirmed = new Confirmed(false); System.</description>
    </item>
    
    <item>
      <title>Domain Date</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/date/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/date/</guid>
      <description>Date Value Types extend DomainDate, which is a wrapper arround a LocalDate instance.
The Date value-type class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;plusDays&amp;rsquo; and &amp;lsquo;minusDays&amp;rsquo;.
For example, the declaration of a new InvoiceDate type:
class InvoiceDate extends DomainDate&amp;lt;InvoiceDate&amp;gt;{ public InvoiceDate(final LocalDate value) { super(value); } @Override protected InvoiceDate createInstance(final LocalDate value) { return new InvoiceDate(value); } } usage:</description>
    </item>
    
    <item>
      <title>Domain DateTime</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/datetime/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/datetime/</guid>
      <description>DateTime Value Types extend DomainDateTime, which is a wrapper arround a LocalDateTime instance. The constructor requires a meta-object MDateTime to specify the precision: minutes, seconds or milliseconds.
The DateTime value-type class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;plusDays&amp;rsquo; and &amp;lsquo;minusDays&amp;rsquo;.
For example, the declaration of a new TimeStamp type:
class TimeStamp extends DomainDateTime&amp;lt;TimeStamp&amp;gt;{ public TimeStamp(final LocalDateTime value) { super(MDateTime.</description>
    </item>
    
    <item>
      <title>Domain Decimal</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/decimal/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/decimal/</guid>
      <description>Decimal Value Types extend DomainDecimal, which is a wrapper arround a BigDecimal instance. The constructor requires a meta-object MDecimal to specify precision, scale and rounding.
The decimal value-type-class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;add&amp;rsquo;, &amp;lsquo;subtract&amp;rsquo;, etc.
For example, the declaration of a new Amount value type with a precision of five digits, and a scale of two:</description>
    </item>
    
    <item>
      <title>Domain Integer / Long</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/integer/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/integer/</guid>
      <description>Note: Value type DomainLong is not described here as it works the same as DomainInteger, except for the larger number range.
 Integer Value Types extend DomainInteger, which is a wrapper arround a Integer instance. The constructor requires a meta-object MInteger to specify lower- and upper-limit.
The integer value-type-class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;append&amp;rsquo;.
For example, the declaration of a new PortNumber value type with a range of [0,65535].</description>
    </item>
    
    <item>
      <title>Domain String / Text</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/string/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/string/</guid>
      <description>Note: Value type DomainText is not described here as it works the same as DomainString, except for the limitless text length.
 String Value Types extend DomainString, which is a wrapper arround a String instance. The constructor requires a meta-object MString to specify length and case.
The string value-type-class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;append&amp;rsquo;.
For example, the declaration of a new Description value type with a lenght of 60 characters.</description>
    </item>
    
    <item>
      <title>Domain Time</title>
      <link>http://vankessel-it.io/real_doc/appendix/domain_valuetype/time/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/appendix/domain_valuetype/time/</guid>
      <description>Time Value Types extend DomainTime, which is a wrapper arround a LocalTime instance. The constructor requires a meta-object MTime to specify the precision: minutes, seconds or milliseconds.
The Time value-type class must implement at least one method; createInstance(). This method allows the return of typed objects after operations as &amp;lsquo;plusSecondes&amp;rsquo; and &amp;lsquo;minusMinutes&amp;rsquo;.
For example, the declaration of a new StartTime type:
class StartTime extends DomainTime&amp;lt;StartTime&amp;gt;{ public StartTime(final LocalTime value) { super(MTime.</description>
    </item>
    
    <item>
      <title>Enumerate</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/enumerate/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/enumerate/</guid>
      <description>The DSL declaration for an Enumerate value type with three options; &amp;lsquo;Yes&amp;rsquo;, &amp;lsquo;No&amp;rsquo;, &amp;lsquo;Unknown&amp;rsquo;:
enumerate YesNoUnknown yesNoUnknownLabel{ Y: yesNoUnknownLabel_Y N: yesNoUnknownLabel_N U: yesNoUnknownLabel_U }  The labels are defined as follows:
labelSet SystemLabels{ label yesNoUnknownLabel &amp;#34;Yes/No/Unknown&amp;#34; label yesNoUnknownLabel_Y &amp;#34;Yes&amp;#34; label yesNoUnknownLabel_N &amp;#34;No&amp;#34; label yesNoUnknownLabel_U &amp;#34;Uknown&amp;#34; }  This will generate one class: YesNoUnknown.java. This class can be extended with custom code, however, as enumerates do not support inheritance, any future changes in the DSL will have to be handled manually.</description>
    </item>
    
    <item>
      <title>Integer</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/integer/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/integer/</guid>
      <description>Note: Value type Long is not described here as it works the same as Integer, except for the larger number range.
 Integer value type DSL declaration, including the lower- and upper-bound for values:
import nl.openframe.erp.system.sr.SYS_SRLabels.batchFrequencyLabel integer BatchFrequency batchFrequencyLabel 0 60  This will generate two new classes: BatchFrequency.java and AbstractBatchFrequency.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class BatchFrequency extends AbstractBatchFrequency{ public BatchFrequency(final Integer value) { super(value); } } The abstract class extends DomainInteger and adds static constructors:</description>
    </item>
    
    <item>
      <title>String</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/string/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/string/</guid>
      <description>Note: Value type Text is not described here as it works the same as String, except for the limitless text length.
 String value type DSL declaration, including maximum number of characters:
import nl.openframe.erp.system.SystemLabels.descriptionLabel string Description descriptionLabel 60  This will generate two new classes: Description.java and AbstractDescription.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class Description extends AbstractDescription{ public Description(final String value) { super(value); } } The abstract class extends DomainString and adds static constructors:</description>
    </item>
    
    <item>
      <title>Time</title>
      <link>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/time/</link>
      <pubDate>Mon, 19 Aug 2019 15:52:16 +0200</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/reference/dsl/dsl_valuetype/time/</guid>
      <description>Time value type DSL declaration, including precision:
import nl.openframe.erp.system.sr.SYS_SRLabels.batchTimeLabel time BatchTime batchTimeLabel minutes  The precision can be milliseconds, seconds or minutes. New instances will be truncated according to their precision.
This will generate two new classes: BatchTime.java and AbstractBatchTime.java. The concrete class is a skeleton-class and can be used to add validation and additional functionality.
public class BatchTime extends AbstractBatchTime{ public BatchTime(final LocalTime value) { super(value); } } The abstract class extends DomainTime and adds static constructors:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://vankessel-it.io/real_doc/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://vankessel-it.io/real_doc/notes/</guid>
      <description>REAL-business:
resources: - goods - employees - packaging - tools - trucks / cars
agents: - customers / suppliers - employees
events: - add resource - purchase goods - purchase tools
 rent-in resource
 enroll employee purchase services  rent-out resource
 sell services   remove resource
 fire employee sell goods sell tools  change resource
 use tools train employee  create resource
 assemble manufacture   Company (system dependency): - manages: currencies, units, languages, departments</description>
    </item>
    
  </channel>
</rss>